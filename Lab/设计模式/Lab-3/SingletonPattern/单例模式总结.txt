饿汉式单例:
1.类加载时即创建单例对象，减慢了响应速度。
2.正因为类加载时即创建单例对象，所以无需考虑线程安全问题。

懒汉式单例：
1.第一次使用时才创建对象，加快系统的响应速度。
2.因涉及到线程安全问题，所以在创建时要用双重检测机制保证线程安全。
3.为了避免JVM的指令重排，单例对象instance需要用volatile修饰。
4.volatile还可以保证线程访问的是主存中的对象，确保了线程间的可见性。

共同点:
1.单例对象都是私有的，且为静态域；
2.构造器须为私有的；
3.向外部提供一个公共的接口来获取单例对象。
4.都无法避免通过反射构造对象。
5.为了保证每次反序列化得到的是同一个对象，需实现readResolve() 方法

	private Object readResolve() throws ObjectStreamException {
		
		return singleton;
	}

	
采用枚举可以防止利用序列化和反射破坏单例



